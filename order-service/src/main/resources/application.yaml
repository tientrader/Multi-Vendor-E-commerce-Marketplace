server:
  port: 8084
  servlet:
    context-path: /order

spring:
  application:
    name: order-service
  datasource:
    url: ${MYSQL_CONNECTION}
    driverClassName: "com.mysql.cj.jdbc.Driver"
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  kafka:
    bootstrap-servers: localhost:9094
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

app:
  services:
    product: http://localhost:8083/product
    profile: http://localhost:8081/profile
    payment: http://localhost:8085/payment

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
    instances:
      getProductPriceById:
        baseConfig: default
      updateStock:
        baseConfig: default

  retry:
    configs:
      default:
        maxRetryAttempts: 3
        waitDuration: 2s
    instances:
      getProductPriceById:
        baseConfig: default
      updateStock:
        baseConfig: default

management:
  endpoints:
    web:
      exposure:
        include: health, metrics, info, prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
  observations:
    key-values:
      application: order-service
  endpoint:
    prometheus:
      enabled: true
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
  tracing:
    exporter:
      tempo:
        url: http://localhost:3200
    sampler:
      probability: 1.0